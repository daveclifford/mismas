#!/usr/bin/ksh
# Script Name: fix-TLS-Logjam-vulnerability.sh
# Author: Gratien D'haese
# License: GPL v3
# Purpose: TLS vulnerability using US export-grade 512-bit keys in Diffie-Hellman key exchange
#   known as "Logjam" which could be exploited remotely resulting in disclosure of information
#
# $Id: fix-TLS-Logjam-vulnerability.sh,v 1.1 2015/09/11 13:03:05 gdhaese1 Exp $
# ----------------------------------------------------------------------------
# Information about this vulnerability can be found on following locations:
#   https://www.openssl.org/blog/blog/2015/05/20/logjam-freak-upcoming-changes/
#   http://h20564.www2.hpe.com/hpsc/doc/public/display?docId=emr_na-c04725401&lang=en-au&cc=au
#   (CVE-2015-4000))
# ----------------------------------------------------------------------------

PS4='$LINENO:=> ' # This prompt will be used when script tracing is turned on
typeset -x PRGNAME=${0##*/}                             # This script short name
typeset -x PRGDIR=${0%/*}                               # This script directory name
typeset -x PATH=$PATH:/usr/bin:/sbin:/usr/sbin:/usr/contrib/bin:
typeset -r platform=$(uname -s)                         # Platform
typeset dlog=/var/tmp                                   # Log directory
typeset instlog=$dlog/${PRGNAME%???}.log
typeset -r lhost=$(uname -n)                            # Local host name
typeset -r osVer=$(uname -r)                            # OS Release
typeset model=$(uname -m)                               # Model of the system
typeset today=$(date +'%Y-%m-%d')
#
typeset -x LANG="C"
typeset -x LC_ALL="C"
typeset ERRcode=0                                       # the exit code ERRcode will be used by send_test_event

# ----------------------------------------------------------------------------
#				DEFAULT VALUES
# ----------------------------------------------------------------------------
# default settings
#
# ----------------------------------------------------------------------------


[[ $PRGDIR = /* ]] || PRGDIR=$(pwd) # Acquire absolute path to the script

umask 022

# -----------------------------------------------------------------------------
#                                  FUNCTIONS
# -----------------------------------------------------------------------------
function _note {
        _echo "  -> $*"
} # Standard message display

function _helpMsg {
	cat <<eof
	Usage: $PRGNAME [-m <mail1,mail2>] [-hv]
		-m: The mail recipients seperated by comma.
		-h: This help message.
		-v: Revision number of this script.
eof
}

function _print {
        printf "%4s %-80s: " "**" "$*"
}

function _ok {
        echo "[  OK  ]"
}

function _nok {
        ERRcode=$((ERRcode + 1))
        echo "[FAILED]"
}

function _na {
        echo "[  N/A ]"
}

function _line {
        echo "-----------------------------------------------------------------------------------------------"
} # draw a line

function _revision {
        typeset rev
        rev=$(awk '/Id:/ { print $4 }' $PRGDIR/$PRGNAME | head -1 | sed -e 's/\$//')
        [ -n "$rev" ] || rev="UNKNOWN"
        echo $rev
} # Acquire revision number of the script and plug it into the log file

function _mail {
        [ -f "$instlog" ] || instlog=/dev/null
	[[ -z "$mailusr" ]] && return
        expand $instlog | mailx -s "$*" $mailusr
} # Standard email

function _echo {
        case $platform in
                Linux|Darwin) arg="-e " ;;
        esac

        echo $arg "$*"
} # echo is not the same between UNIX and Linux

function _error {
	_echo "ERROR: $*"
	echo
	exit 1
}

function _whoami {
        if [ "`whoami`" != "root" ]; then
                _error "$(whoami) - You must be root to run script $PRGNAME"
        fi
}

function is_digit {
	expr "$1" + 1 > /dev/null 2>&1	# sets the exit to non-zero if $1 non-numeric
}

function _collect_httpd_conf {
	rm -f /tmp/list_httpd_conf_files.txt
	find /usr -name "http*.conf" | grep -vE '(man|grep)' > /tmp/list_httpd_conf_files.txt
	find /opt -name "http*.conf" | grep -vE '(man|grep)' >> /tmp/list_httpd_conf_files.txt
	# if /tmp/list_httpd_conf_files.txt exists and has a size > 0 then return with 0 otherwise 1
	[[ -s /tmp/list_httpd_conf_files.txt ]] && return 0 || return 1
}

function _search_keyword_in_httpd_conf {
	rm -f /tmp/list_httpd_conf_files_containing_SSLCipherSuite_keyword
	[[ ! -f /tmp/list_httpd_conf_files.txt ]] && return  # nothing to do
	for FILE in $(cat /tmp/list_httpd_conf_files.txt)
	do
		[[ ! -f "$FILE" ]] && continue  # to be sure we are dealing with a file
		grep -q "SSLCipherSuite" "$FILE" 
		if [[ $? -eq 0 ]]; then
			echo "$FILE" >> /tmp/list_httpd_conf_files_containing_SSLCipherSuite_keyword
		fi
	done
}

function _find_vulnerable_httpd_conf {
	rm -f /tmp/EXP_vulnerable_httpd_conf_files
	[[ ! -f /tmp/list_httpd_conf_files_containing_SSLCipherSuite_keyword ]] && return 1 # nothing to do
	for FILE in $(cat /tmp/list_httpd_conf_files_containing_SSLCipherSuite_keyword)
	do
		grep "SSLCipherSuite" "$FILE" | grep -v "^#SSLCipherSuite" | grep -q "+EXP"
		if [[ $? -eq 0 ]]; then
			_note "Configuration file $FILE is vulnerable for OpenSSL Logjam"
			echo "$FILE" >> /tmp/EXP_vulnerable_httpd_conf_files
		else
			_note "Configuration file $FILE is \"not\" vulnerable for OpenSSL Logjam"
		fi
	done
}

function _make_backup_files_of_httpd_conf {
	[[ ! -f /tmp/EXP_vulnerable_httpd_conf_files ]] && return  # nothing to do
	for FILE in $(cat /tmp/EXP_vulnerable_httpd_conf_files)
	do
		cp -p "$FILE" "$FILE".$today
		_note "Backup file $FILE.$today created"
	done
}

function _disable_exp_in_httpd_conf {
	[[ ! -f /tmp/EXP_vulnerable_httpd_conf_files ]] && return  # nothing to do
	for FILE in $(cat /tmp/EXP_vulnerable_httpd_conf_files)
	do
		_note "Fix $FILE"
                ed -s "$FILE" <<-EOD
		/^SSLCipherSuite/
		s/SSLCipherSuite/#SSLCipherSuite/
		t.
		s/+EXP/!EXP/
		s/#SSLCipherSuite/SSLCipherSuite/
		w
		q
		EOD
	done
}

function _show_exp_in_httpd_conf {
	[[ ! -f /tmp/EXP_vulnerable_httpd_conf_files ]] && return  # nothing to do
	for FILE in $(cat /tmp/EXP_vulnerable_httpd_conf_files)
	do
		_note "Evidence of disabled EXP flag in $FILE"
		grep "SSLCipherSuite" "$FILE" | grep -v "#SSLCipherSuite" | grep "EXP"
		echo
	done
}

function _restart_httpd_HPUX {
	[[ ! -f /tmp/EXP_vulnerable_httpd_conf_files ]] && return  # nothing to do
	[[ -x /sbin/init.d/hpsmh ]] && {
		/sbin/init.d/hpsmh stop
		/sbin/init.d/hpsmh start
		}
	[[ -x /sbin/init.d/hpws_apache ]] && {
		/sbin/init.d/hpws_apache stop
		/sbin/init.d/hpws_apache start
		}
	[[ -x /sbin/init.d/hpws22_apache ]] && {
		/sbin/init.d/hpws22_apache stop
		/sbin/init.d/hpws22_apache start
		}
}

function _restart_httpd_Linux {
	[[ ! -f /tmp/EXP_vulnerable_httpd_conf_files ]] && return  # nothing to do
	[[ -x /etc/init.d/hpsmhd ]] && /etc/init.d/hpsmhd restart
	[[ -x /etc/init.d/httpd ]] && /etc/init.d/httpd restart
	[[ -x /opt/NAI/LinuxShield//apache/bin/apachectl ]] && /opt/NAI/LinuxShield//apache/bin/apachectl restart

}

function _restart_httpd_SunOS {
	_note "WARNING: give me feedback what needs to be restrated on SunOS"
	[[ ! -f /tmp/EXP_vulnerable_httpd_conf_files ]] && return  # nothing to do
}

# -----------------------------------------------------------------------------
#				End of Functions
# -----------------------------------------------------------------------------



# ------------------------------------------------------------------------------
#                                   Analyse Arguments
# ------------------------------------------------------------------------------
while getopts ":m:vh" opt; do
	case "$opt" in
		m)	mailusr="$OPTARG"
			if [ -z "$mailusr" ]; then
				mailusr=root
			fi
			;;
		v)	_revision; exit ;;
		h)	_helpMsg; exit 0 ;;
		\?)
			_note "$PRGNAME: unknown option used: [$OPTARG]."
			_helpMsg; exit 0
			;;
	esac
done
shift $(( OPTIND - 1 ))

# -----------------------------------------------------------------------------
#				Sanity Checks
# -----------------------------------------------------------------------------
# check if LOG directory exists, if not, create it first
if [ ! -d $dlog ]; then
	_note "$PRGNAME ($LINENO): [$dlog] does not exist."
	_echo "     -- creating now: \c"
	mkdir -p $dlog && echo "[  OK  ]" || {
		echo "[FAILED]"
		_note "Could not create [$dlog]. Exiting now"
		exit 1
	}
fi

# ------------------------------------------------------------------------------
#					MAIN BODY
# ------------------------------------------------------------------------------

# before jumping into MAIN move the existing instlog to instlog.old
[ -f $instlog ] && mv -f $instlog ${instlog}.old

{
    _line
    echo "               Script: $PRGNAME"
    [[ "$(_revision)" = "UNKNOWN" ]] || echo "             Revision: $(_revision)"
    echo "       Executing User: $(whoami)"
    echo "     Mail Destination: $mailusr"
    echo "                 Date: $(date)"
    echo "                  Log: $instlog"
    _line; echo

    _whoami         # only root can run this

    _note "Collect all httpd related configuration files..."
    _collect_httpd_conf
    if (( $? > 0 )); then
        _note "We were not able to find any httpd related configuration file."
	_note "If you are sure this script is wrong then, or ask the author"
	_note "to fix it, or create a pull request yourself"
	exit 0
    fi

    _note "Search http configuration files containing SSLCipherSuite keyword"
    _search_keyword_in_httpd_conf
    echo

    _note "Search for +EXP vulnerability with TLS"
    _find_vulnerable_httpd_conf
    if (( $? > 0 )); then
        _note "None of the httpd related configuration files are vulnerable."
	exit 0
    fi
    echo

    # input file /tmp/EXP_vulnerable_httpd_conf_files contains the config files that need to be fixed
    _note "Make a backup copy of httpd configuration files"
    _make_backup_files_of_httpd_conf

    # fix the httpd conf files
    _note "Disable EXP in httpd configuration files"
    _disable_exp_in_httpd_conf
    
    # show succesfull disable of EXP
    _show_exp_in_httpd_conf

    _note "Restarting httpd daemons..."
    case $platform in
     HP-UX) _restart_httpd_HPUX
	    ;;
     Linux) _restart_httpd_Linux
	    ;;
     SunOS) _restart_httpd_SunOS
	    ;;
     *) _note "[$platform] is not yet supported by this script.\n"
	exit ;;
    esac


    echo
    _line
    echo "Finished."
    _line
} 2>&1 | tee -a $instlog 2>/dev/null # tee is used in case of interactive run
[ $? -eq 1 ] && exit 1          # do not send an e-mail as non-root (no log file either)

_mail "Results of $PRGNAME (see also $instlog)"

# cleanup
rm -f /tmp/list_httpd_conf_files.txt /tmp/list_httpd_conf_files_containing_SSLCipherSuite_keyword
rm -f /tmp/EXP_vulnerable_httpd_conf_files
# ----------------------------------------------------------------------------
exit 0
